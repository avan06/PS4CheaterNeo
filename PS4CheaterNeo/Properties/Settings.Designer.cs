//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PS4CheaterNeo.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.7.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("|1_General|1_Connect|Enter PS4 IP location")]
        public global::OptionTreeView.Option<string> PS4IP {
            get {
                return ((global::OptionTreeView.Option<string>)(this["PS4IP"]));
            }
            set {
                this["PS4IP"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("9021|1_General|1_Connect|Enter PS4 Port")]
        public global::OptionTreeView.Option<ushort> PS4Port {
            get {
                return ((global::OptionTreeView.Option<ushort>)(this["PS4Port"]));
            }
            set {
                this["PS4Port"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("|1_General|1_SendPayload|Enter PS4 FW Version (Confirm the fw version only when p" +
            "erform sendpayload)")]
        public global::OptionTreeView.Option<string> PS4FWVersion {
            get {
                return ((global::OptionTreeView.Option<string>)(this["PS4FWVersion"]));
            }
            set {
                this["PS4FWVersion"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True|1_General|2_UI|Determines whether to enable collapsible split container ui i" +
            "n Query and HexEditor and PointerFinder windows. \\nDefault enabled")]
        public global::OptionTreeView.Option<bool> CollapsibleContainer {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["CollapsibleContainer"]));
            }
            set {
                this["CollapsibleContainer"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.95|1_General|2_UI|Determines the opacity of the window, the maximum is 1 (opaqu" +
            "e), \\nDefault 0.95|0.2|1")]
        public global::OptionTreeView.Option<float> UIOpacity {
            get {
                return ((global::OptionTreeView.Option<float>)(this["UIOpacity"]));
            }
            set {
                this["UIOpacity"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"True|1_General|2_UI|Determines whether to enable the GroupByEnabled feature in CheatGridView. \nWhen enabled, Cheat items will be grouped. \nIf you have a large number of Cheat items, \nyou may consider disabling this feature to speed up Cheat loading. \nAfter setting this, you need to restart the program for it to take effect. \nDefault enabled")]
        public global::OptionTreeView.Option<bool> CheatGridViewGroupByEnabled {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["CheatGridViewGroupByEnabled"]));
            }
            set {
                this["CheatGridViewGroupByEnabled"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"3|1_General|3_PS4Tool|It is not recommended to adjust this value, and changes take effect only after a restart. \nThe Mutex factor determines the number of connections that PS4DBG can occupy during initialization. \nFor ReadMemory, the number of connections is from 0 to (but not including) mutexFactor. \nFor WriteMemory, the number of connections is from mutexFactor to (but not including) 2*mutexFactor. \nDefault value is 3.")]
        public global::OptionTreeView.Option<byte> PS4DBGMutexFactor {
            get {
                return ((global::OptionTreeView.Option<byte>)(this["PS4DBGMutexFactor"]));
            }
            set {
                this["PS4DBGMutexFactor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True|2_Cheat|Cheat|Determine whether to automatically write to PS4 when editing c" +
            "heat values in UpDown")]
        public global::OptionTreeView.Option<bool> CheatCellDirtyValueCommit {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["CheatCellDirtyValueCommit"]));
            }
            set {
                this["CheatCellDirtyValueCommit"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True|2_Cheat|CheatLock|Determines whether to enable cheat lock in the main window" +
            ". \\nDefault enabled")]
        public global::OptionTreeView.Option<bool> CheatLock {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["CheatLock"]));
            }
            set {
                this["CheatLock"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True|2_Cheat|CheatLock|Determine whether to enable verifying Section values when " +
            "locking cheat items. \\nDefault enabled")]
        public global::OptionTreeView.Option<bool> VerifySectionWhenLock {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["VerifySectionWhenLock"]));
            }
            set {
                this["VerifySectionWhenLock"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False|2_Cheat|CheatRefresh|Determines whether to enable Auto Refresh in main wind" +
            "ow. \\nDefault disabled")]
        public global::OptionTreeView.Option<bool> CheatAutoRefresh {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["CheatAutoRefresh"]));
            }
            set {
                this["CheatAutoRefresh"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False|2_Cheat|CheatRefresh|Determines whether to display its execution status in " +
            "the main window when CheatAutoRefresh is enabled. \\nDefault disabled")]
        public global::OptionTreeView.Option<bool> CheatAutoRefreshShowStatus {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["CheatAutoRefreshShowStatus"]));
            }
            set {
                this["CheatAutoRefreshShowStatus"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("2500|2_Cheat|CheatRefresh|Determines the Interval of AutoRefreshTimer when AutoRe" +
            "fresh is enabled, in milliseconds. \\nDefault 2500")]
        public global::OptionTreeView.Option<uint> CheatAutoRefreshTimerInterval {
            get {
                return ((global::OptionTreeView.Option<uint>)(this["CheatAutoRefreshTimerInterval"]));
            }
            set {
                this["CheatAutoRefreshTimerInterval"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True|2_Cheat|CheatRefresh|Determine whether to enable verifying Section values wh" +
            "en refreshing the cheat list. \\nDefault enabled")]
        public global::OptionTreeView.Option<bool> VerifySectionWhenRefresh {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["VerifySectionWhenRefresh"]));
            }
            set {
                this["VerifySectionWhenRefresh"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True|3_Query|1_Query|Determine whether to enable automatic perform get processes " +
            "when opening the Query window. \\nDefault enabled")]
        public global::OptionTreeView.Option<bool> AutoPerformGetProcesses {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["AutoPerformGetProcesses"]));
            }
            set {
                this["AutoPerformGetProcesses"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("eboot.bin|3_Query|1_Query|Set the default selected program when perform get proce" +
            "sses. \\nDefault is eboot.bin")]
        public global::OptionTreeView.Option<string> DefaultProcess {
            get {
                return ((global::OptionTreeView.Option<string>)(this["DefaultProcess"]));
            }
            set {
                this["DefaultProcess"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("3|3_Query|1_Query|Enter the number of threads to use when querying. \\nDefault is " +
            "3 threads")]
        public global::OptionTreeView.Option<byte> MaxQueryThreads {
            get {
                return ((global::OptionTreeView.Option<byte>)(this["MaxQueryThreads"]));
            }
            set {
                this["MaxQueryThreads"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"50|3_Query|1_Query|Set the minimum buffer size (in MB) in querying and pointerFinder, \nenter 0 to not use buffer, setting this value to 0 is better when the total number of Sections in the game is low. \nIf the game has more than a thousand Sections, Buffer must be set")]
        public global::OptionTreeView.Option<uint> QueryBufferSize {
            get {
                return ((global::OptionTreeView.Option<uint>)(this["QueryBufferSize"]));
            }
            set {
                this["QueryBufferSize"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("50|3_Query|1_Query|Access value directly by address when the number of query resu" +
            "lts for the same Section is less than this factor, \\nused to control whether to " +
            "read Section data completely, or directly access the value by address. \\nDefault" +
            " value is 50")]
        public global::OptionTreeView.Option<sbyte> MinResultAccessFactor {
            get {
                return ((global::OptionTreeView.Option<sbyte>)(this["MinResultAccessFactor"]));
            }
            set {
                this["MinResultAccessFactor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True|3_Query|1_Query|Determines whether to enable undo scan(revert to the previou" +
            "s scan result), \\nif enabled, more memory needs to be used during scanning. \\nDe" +
            "fault enable")]
        public global::OptionTreeView.Option<bool> UndoScan {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["UndoScan"]));
            }
            set {
                this["UndoScan"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False|3_Query|1_Query|Determines whether to automatically pause the game when sta" +
            "rting the scan in query. \\nDefault disabled")]
        public global::OptionTreeView.Option<bool> ScanAutoPause {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["ScanAutoPause"]));
            }
            set {
                this["ScanAutoPause"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False|3_Query|1_Query|Determines whether to automatically resume the game when th" +
            "e scan is complete in query. \\nDefault disabled")]
        public global::OptionTreeView.Option<bool> ScanAutoResume {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["ScanAutoResume"]));
            }
            set {
                this["ScanAutoResume"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True|3_Query|1_Query|Determines whether to show search size message when FirstSca" +
            "n. \\nDefault enabled")]
        public global::OptionTreeView.Option<bool> ShowSearchSizeFirstScan {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["ShowSearchSizeFirstScan"]));
            }
            set {
                this["ShowSearchSizeFirstScan"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"False|3_Query|1_Query|Determines whether to enable not skipping values\n with a byte of 0 when the Compare Type is UnknownInitial in the Query window. \nNote: Enabling this option will significantly increase the number of results. \nRestart the Query window for the setting to take effect. \nDefault disabled")]
        public global::OptionTreeView.Option<bool> UnknownInitialScanDoNotSkip0 {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["UnknownInitialScanDoNotSkip0"]));
            }
            set {
                this["UnknownInitialScanDoNotSkip0"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True|3_Query|2_Floating|Determines whether to make the calculation result of Floa" +
            "ting(float, double) completely exact in query window, \\nthere can be 0.0001 diff" +
            "erence in the old mechanism. \\nDefault enabled")]
        public global::OptionTreeView.Option<bool> FloatingResultExact {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["FloatingResultExact"]));
            }
            set {
                this["FloatingResultExact"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("11|3_Query|2_Floating|Determine the exponents value of the simple value of floati" +
            "ng. \\nCheat Engine is set to 11 (2 to the 11th power = 2^11 = plus or minus 2048" +
            "). \\nDefault value is 11")]
        public global::OptionTreeView.Option<byte> FloatingSimpleValueExponents {
            get {
                return ((global::OptionTreeView.Option<byte>)(this["FloatingSimpleValueExponents"]));
            }
            set {
                this["FloatingSimpleValueExponents"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True|3_Query|3_Filter|Determine whether to enable filtering Sections when opening" +
            " the query window. \\nDefault enabled")]
        public global::OptionTreeView.Option<bool> FilterQuery {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["FilterQuery"]));
            }
            set {
                this["FilterQuery"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("libSce,libc.prx,SceShell,SceLib,SceNp,SceVoice,SceFios,libkernel,SceVdec|3_Query|" +
            "3_Filter|Enter the filter value, the filter will be set here when listing Sectio" +
            "ns")]
        public global::OptionTreeView.Option<string> SectionFilterKeys {
            get {
                return ((global::OptionTreeView.Option<string>)(this["SectionFilterKeys"]));
            }
            set {
                this["SectionFilterKeys"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False|3_Query|3_Filter|Determine whether to enable filtering Sections by size whe" +
            "n opening the query window. \\nDefault disabled")]
        public global::OptionTreeView.Option<bool> FilterSizeQuery {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["FilterSizeQuery"]));
            }
            set {
                this["FilterSizeQuery"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("204800|3_Query|3_Filter|Filter out when section size is less than this value(unit" +
            " is bytes)")]
        public global::OptionTreeView.Option<uint> SectionFilterSize {
            get {
                return ((global::OptionTreeView.Option<uint>)(this["SectionFilterSize"]));
            }
            set {
                this["SectionFilterSize"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0x2000|3_Query|4_Result|Enter the maximum number of displayed query results. \\nwi" +
            "ll only affect the number of results displayed in the ResultView. \\nDefault valu" +
            "e is 8192")]
        public global::OptionTreeView.Option<uint> MaxResultShow {
            get {
                return ((global::OptionTreeView.Option<uint>)(this["MaxResultShow"]));
            }
            set {
                this["MaxResultShow"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False|3_Query|5_SectionView|Determine whether to enable the FullRowSelect feature" +
            " in the SectionView of the Query window. \\nDefault disabled")]
        public global::OptionTreeView.Option<bool> SectionViewFullRowSelect {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["SectionViewFullRowSelect"]));
            }
            set {
                this["SectionViewFullRowSelect"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False|3_Query|5_SectionView|Determine whether to enable automatic detection of hi" +
            "dden sections. \\nThis is currently an experimental feature. \\nDefault disabled")]
        public global::OptionTreeView.Option<bool> SectionViewDetectHiddenSection {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["SectionViewDetectHiddenSection"]));
            }
            set {
                this["SectionViewDetectHiddenSection"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0x40000000|3_Query|5_SectionView|Specify the Hex length of the last hidden sectio" +
            "n. \\nThis only takes effect when SectionViewDetectHiddenSection is enabled. \\nDe" +
            "fault value is 0x40000000.")]
        public global::OptionTreeView.Option<ulong> LastHiddenSectionLengthHex {
            get {
                return ((global::OptionTreeView.Option<ulong>)(this["LastHiddenSectionLengthHex"]));
            }
            set {
                this["LastHiddenSectionLengthHex"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"True|3_Query|5_SectionView|Determine whether to enable the starting address of the Hidden Section to be the end address of the previous section. \nIf not enabled, the starting address will be the end address of the previous section plus 1. \nDefault enable")]
        public global::OptionTreeView.Option<bool> HiddenSectionStartAtPreviousEnd {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["HiddenSectionStartAtPreviousEnd"]));
            }
            set {
                this["HiddenSectionStartAtPreviousEnd"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"False|3_Query|5_SectionView|Determine whether to enable writing detected hidden section configurations to the ""path to PS4CheaterNeo\sections\[GAME_ID].conf"" path. \nThis option must be enabled when using the ""SCAN for Hidden Sections"" query window scan type. \nNote: Enabling this option will result in longer startup times for the Query window as it queries [GAME_ID] information every time the program starts. \nDefault disabled")]
        public global::OptionTreeView.Option<bool> WriteHiddenSectionConf {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["WriteHiddenSectionConf"]));
            }
            set {
                this["WriteHiddenSectionConf"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False|4_HexEditor|Hex|Determines whether to enable Auto Refresh in HexEditor. \\nD" +
            "efault disabled")]
        public global::OptionTreeView.Option<bool> AutoRefresh {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["AutoRefresh"]));
            }
            set {
                this["AutoRefresh"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("2500|4_HexEditor|Hex|Determines the Interval of AutoRefreshTimer when AutoRefresh" +
            " is enabled, in milliseconds, \\nHexEditor needs to be restarted after this value" +
            " is changed. \\nDefault 2500")]
        public global::OptionTreeView.Option<uint> AutoRefreshTimerInterval {
            get {
                return ((global::OptionTreeView.Option<uint>)(this["AutoRefreshTimerInterval"]));
            }
            set {
                this["AutoRefreshTimerInterval"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("-|4_HexEditor|Hex|Determines the delimited dash value that displays the current H" +
            "ex value in the HexEditor. \\nDefault \"-\"")]
        public global::OptionTreeView.Option<string> HexInfoDash {
            get {
                return ((global::OptionTreeView.Option<string>)(this["HexInfoDash"]));
            }
            set {
                this["HexInfoDash"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True|4_HexEditor|Find|Determines whether to enable automatic selection of the val" +
            "ue change position \\nclosest to the current location when there is no input valu" +
            "e for the find value. \\nDefault enabled")]
        public global::OptionTreeView.Option<bool> AutoFindClosestChangedPosition {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["AutoFindClosestChangedPosition"]));
            }
            set {
                this["AutoFindClosestChangedPosition"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True|4_HexEditor|Find|Determines whether to enable the input format for searching" +
            " as Hex in the HexEditor window. \\nDefault enabled")]
        public global::OptionTreeView.Option<bool> InputIsHexFormat {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["InputIsHexFormat"]));
            }
            set {
                this["InputIsHexFormat"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False|4_HexEditor|Find|Determines whether to enable using LittleEndian endianness" +
            ", when the input format for the search is Hex, \\nin the HexEditor window, if thi" +
            "s option is not checked, it will use BigEndian. \\nDefault disabled")]
        public global::OptionTreeView.Option<bool> UsingLittleEndian {
            get {
                return ((global::OptionTreeView.Option<bool>)(this["UsingLittleEndian"]));
            }
            set {
                this["UsingLittleEndian"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0|5_UI|1_Color Theme|Determine color theme")]
        public global::OptionTreeView.Option<PS4CheaterNeo.ColorTheme> ColorTheme {
            get {
                return ((global::OptionTreeView.Option<PS4CheaterNeo.ColorTheme>)(this["ColorTheme"]));
            }
            set {
                this["ColorTheme"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("White|5_UI|1_Color Ui|Determine the UI foreground color")]
        public global::OptionTreeView.Option<System.Drawing.Color> UiForeColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["UiForeColor"]));
            }
            set {
                this["UiForeColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("242424|5_UI|1_Color Ui|Determine the UI background color")]
        public global::OptionTreeView.Option<System.Drawing.Color> UiBackColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["UiBackColor"]));
            }
            set {
                this["UiBackColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("ControlText|5_UI|2_Color Main|Determine the Main foreground color")]
        public global::OptionTreeView.Option<System.Drawing.Color> MainForeColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["MainForeColor"]));
            }
            set {
                this["MainForeColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("ControlDarkDark|5_UI|2_Color Main|Determine the Main background color")]
        public global::OptionTreeView.Option<System.Drawing.Color> MainBackColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["MainBackColor"]));
            }
            set {
                this["MainBackColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("FF99B4D1|5_UI|2_Color Main|Determine the Main ToolStrip1 background color")]
        public global::OptionTreeView.Option<System.Drawing.Color> MainToolStrip1BackColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["MainToolStrip1BackColor"]));
            }
            set {
                this["MainToolStrip1BackColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("White|5_UI|2_Color Main|Determine the Main CheatGridView RowIndex foreground colo" +
            "r")]
        public global::OptionTreeView.Option<System.Drawing.Color> MainCheatGridViewRowIndexForeColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["MainCheatGridViewRowIndexForeColor"]));
            }
            set {
                this["MainCheatGridViewRowIndexForeColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("DimGray|5_UI|2_Color Main|Determine the Main CheatGridView background color")]
        public global::OptionTreeView.Option<System.Drawing.Color> MainCheatGridViewBackgroundColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["MainCheatGridViewBackgroundColor"]));
            }
            set {
                this["MainCheatGridViewBackgroundColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("647381|5_UI|2_Color Main|Determine the Main CheatGridView base row color")]
        public global::OptionTreeView.Option<System.Drawing.Color> MainCheatGridViewBaseRowColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["MainCheatGridViewBaseRowColor"]));
            }
            set {
                this["MainCheatGridViewBaseRowColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Silver|5_UI|2_Color Main|Determine the Main CheatGridView grid color")]
        public global::OptionTreeView.Option<System.Drawing.Color> MainCheatGridViewGridColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["MainCheatGridViewGridColor"]));
            }
            set {
                this["MainCheatGridViewGridColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("White|5_UI|2_Color Main|Determine the Main dataGridViewCellStyle foreground color" +
            "")]
        public global::OptionTreeView.Option<System.Drawing.Color> MainCheatGridCellForeColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["MainCheatGridCellForeColor"]));
            }
            set {
                this["MainCheatGridCellForeColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("404040|5_UI|2_Color Main|Determine the Main dataGridViewCellStyle background colo" +
            "r")]
        public global::OptionTreeView.Option<System.Drawing.Color> MainCheatGridCellBackColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["MainCheatGridCellBackColor"]));
            }
            set {
                this["MainCheatGridCellBackColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("DimGray|5_UI|3_Color Query|Determine the Query StatusStrip1 background color")]
        public global::OptionTreeView.Option<System.Drawing.Color> QueryStatusStrip1BackColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["QueryStatusStrip1BackColor"]));
            }
            set {
                this["QueryStatusStrip1BackColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Silver|5_UI|3_Color Query|Determine the AlignmentBox foreground color")]
        public global::OptionTreeView.Option<System.Drawing.Color> QueryAlignmentBoxForeColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["QueryAlignmentBoxForeColor"]));
            }
            set {
                this["QueryAlignmentBoxForeColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SteelBlue|5_UI|3_Color Query|Determine the Query ScanBtn background color")]
        public global::OptionTreeView.Option<System.Drawing.Color> QueryScanBtnBackColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["QueryScanBtnBackColor"]));
            }
            set {
                this["QueryScanBtnBackColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("DarkGray|5_UI|3_Color Query|Determine the Query SectionView Filter foreground col" +
            "or")]
        public global::OptionTreeView.Option<System.Drawing.Color> QuerySectionViewFilterForeColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["QuerySectionViewFilterForeColor"]));
            }
            set {
                this["QuerySectionViewFilterForeColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("DimGray|5_UI|3_Color Query|Determine the Query SectionView Filter background colo" +
            "r")]
        public global::OptionTreeView.Option<System.Drawing.Color> QuerySectionViewFilterBackColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["QuerySectionViewFilterBackColor"]));
            }
            set {
                this["QuerySectionViewFilterBackColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("DarkCyan|5_UI|3_Color Query|Determine the Query SectionView FilterSize foreground" +
            " color")]
        public global::OptionTreeView.Option<System.Drawing.Color> QuerySectionViewFilterSizeForeColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["QuerySectionViewFilterSizeForeColor"]));
            }
            set {
                this["QuerySectionViewFilterSizeForeColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("DarkSlateGray|5_UI|3_Color Query|Determine the Query SectionView FilterSize backg" +
            "round color")]
        public global::OptionTreeView.Option<System.Drawing.Color> QuerySectionViewFilterSizeBackColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["QuerySectionViewFilterSizeBackColor"]));
            }
            set {
                this["QuerySectionViewFilterSizeBackColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("GreenYellow|5_UI|3_Color Query|Determine the Query SectionView executable foregro" +
            "und color")]
        public global::OptionTreeView.Option<System.Drawing.Color> QuerySectionViewExecutableForeColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["QuerySectionViewExecutableForeColor"]));
            }
            set {
                this["QuerySectionViewExecutableForeColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Red|5_UI|3_Color Query|Determine the Query SectionView NoName foreground color")]
        public global::OptionTreeView.Option<System.Drawing.Color> QuerySectionViewNoNameForeColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["QuerySectionViewNoNameForeColor"]));
            }
            set {
                this["QuerySectionViewNoNameForeColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("HotPink|5_UI|3_Color Query|Determine the Query SectionView NoName2 foreground col" +
            "or")]
        public global::OptionTreeView.Option<System.Drawing.Color> QuerySectionViewNoName2ForeColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["QuerySectionViewNoName2ForeColor"]));
            }
            set {
                this["QuerySectionViewNoName2ForeColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Firebrick|5_UI|3_Color Query|Determine the Query SectionView Hidden foreground co" +
            "lor")]
        public global::OptionTreeView.Option<System.Drawing.Color> QuerySectionViewHiddenForeColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["QuerySectionViewHiddenForeColor"]));
            }
            set {
                this["QuerySectionViewHiddenForeColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("DarkSlateGray|5_UI|3_Color Query|Determine the Query SectionView ItemCheck1 backg" +
            "round color")]
        public global::OptionTreeView.Option<System.Drawing.Color> QuerySectionViewItemCheck1BackColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["QuerySectionViewItemCheck1BackColor"]));
            }
            set {
                this["QuerySectionViewItemCheck1BackColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("DarkGreen|5_UI|3_Color Query|Determine the Query SectionView ItemCheck2 backgroun" +
            "d color")]
        public global::OptionTreeView.Option<System.Drawing.Color> QuerySectionViewItemCheck2BackColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["QuerySectionViewItemCheck2BackColor"]));
            }
            set {
                this["QuerySectionViewItemCheck2BackColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("LimeGreen|5_UI|4_Color HexEditor|Determine the HexEditor ChangedFinish foreground" +
            " color")]
        public global::OptionTreeView.Option<System.Drawing.Color> HexEditorChangedFinishForeColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["HexEditorChangedFinishForeColor"]));
            }
            set {
                this["HexEditorChangedFinishForeColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("643CBCFF|5_UI|4_Color HexEditor|Determine the HexEditor ShadowSelection color")]
        public global::OptionTreeView.Option<System.Drawing.Color> HexEditorShadowSelectionColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["HexEditorShadowSelectionColor"]));
            }
            set {
                this["HexEditorShadowSelectionColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("DimGray|5_UI|4_Color HexEditor|Determine the HexEditor ZeroBytes foreground color" +
            "")]
        public global::OptionTreeView.Option<System.Drawing.Color> HexEditorZeroBytesForeColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["HexEditorZeroBytesForeColor"]));
            }
            set {
                this["HexEditorZeroBytesForeColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("DimGray|5_UI|5_Color PointerFinder|Determine the PointerFinder statusStrip1 backg" +
            "round color")]
        public global::OptionTreeView.Option<System.Drawing.Color> PointerFinderStatusStrip1BackColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["PointerFinderStatusStrip1BackColor"]));
            }
            set {
                this["PointerFinderStatusStrip1BackColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("SteelBlue|5_UI|5_Color PointerFinder|Determine the PointerFinder ScanBtn backgrou" +
            "nd color")]
        public global::OptionTreeView.Option<System.Drawing.Color> PointerFinderScanBtnBackColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["PointerFinderScanBtnBackColor"]));
            }
            set {
                this["PointerFinderScanBtnBackColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Silver|5_UI|6_Color SendPayload|Determine the SendPayload statusStrip1 background" +
            " color")]
        public global::OptionTreeView.Option<System.Drawing.Color> SendPayloadStatusStrip1BackColor {
            get {
                return ((global::OptionTreeView.Option<System.Drawing.Color>)(this["SendPayloadStatusStrip1BackColor"]));
            }
            set {
                this["SendPayloadStatusStrip1BackColor"] = value;
            }
        }
    }
}
